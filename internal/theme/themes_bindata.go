// Code generated by go-bindata.
// sources:
// themes/comply-blank/README.md
// themes/comply-soc2/README.md
// themes/comply-soc2/narratives/README.md
// themes/comply-soc2/narratives/organizational.md
// themes/comply-soc2/policies/README.md
// themes/comply-soc2/policies/application.md
// themes/comply-soc2/policies/information.md
// themes/comply-soc2/policies/training.md
// themes/comply-soc2/procedures/README.md
// themes/comply-soc2/procedures/onboarding.md
// themes/comply-soc2/standards/README.md
// themes/comply-soc2/standards/TSPC-2017.yml
// DO NOT EDIT!

package theme

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _complyBlankReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x48\xce\xcf\x2d\xc8\xa9\xd4\x4d\xca\x49\xcc\xcb\xe6\x0a\xc9\x48\x55\x70\x06\x0b\x28\x14\x14\xe5\x67\xa5\x26\x97\x28\x14\x97\x14\x95\x26\x97\x94\x16\xa5\x2a\x94\x67\x96\x64\x28\xe4\xe5\x43\x74\x64\x26\xe6\x25\xa7\x2a\x14\xa5\xa6\x67\xe6\xa6\x16\x73\x01\x02\x00\x00\xff\xff\x0d\x8a\x5a\xf5\x47\x00\x00\x00")

func complyBlankReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_complyBlankReadmeMd,
		"comply-blank/README.md",
	)
}

func complyBlankReadmeMd() (*asset, error) {
	bytes, err := complyBlankReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-blank/README.md", size: 71, mode: os.FileMode(420), modTime: time.Unix(1521499879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2ReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xeb\x2b\x08\xe4\x5a\x18\xb3\x9d\xc4\xed\x6e\x86\xb7\x43\x0f\xae\xb5\xa6\xdb\x5d\x93\x59\x87\xa8\x22\x19\x92\x9c\x2d\xfb\xfa\x81\x4a\x9c\xc6\x3b\xac\x17\x02\x22\xdf\x23\xf5\xf8\xb8\x82\x5d\xd7\x14\xf0\xf5\xb7\x3a\x8c\x06\xe1\xd5\x79\x88\x7b\x84\xc6\x1d\x46\x73\x82\xe8\x9c\x79\xa3\x28\xc4\xcb\x1e\x41\x3b\x1b\x15\x59\xec\xc1\x2a\xef\x55\xa4\x23\x86\x3b\x18\x9d\x21\x4d\x18\x40\xd9\x1e\x46\xef\x34\xf6\x93\xe7\xa7\x47\xe8\x31\xd0\xc0\x84\xe8\x40\xf5\xbd\xc7\x10\x52\x17\xef\x4c\x00\x15\x82\xd3\xa4\x22\xf6\xf0\x8b\xe2\x3e\x8d\xdd\xc0\x8b\x9f\x42\x84\x1d\xfa\x23\x69\x04\xe9\xc9\x6a\x1a\x0d\x86\xcf\x42\x40\x9e\xc1\x0e\xf5\xe4\x29\x9e\xd2\xa3\x3e\x2a\x32\xea\x27\x99\x39\x21\x79\x7c\x08\x64\x07\x20\x1b\x71\xb8\x22\x1b\x67\x5f\xa9\x47\x1b\x49\xdd\x80\xe9\xa8\xf4\x49\x88\x15\xab\x3d\x38\x0b\x8d\xa7\x88\x9e\xd4\x2c\x37\x25\xf5\x25\x99\x04\xc5\x94\xf7\x38\xab\xe0\xa4\x0a\x10\xf7\x2a\x42\x98\xc6\xd1\xf9\xf8\x81\x8e\x4c\x88\xd5\x0a\xba\x16\x3a\x3f\x28\x4b\x7f\x54\x24\x67\x85\x68\x9a\x3c\xcb\xef\x20\xcf\x0a\x0e\x25\x87\x35\x87\x4d\x82\x37\x5d\x9b\xfe\x38\x59\xd2\x89\x10\x98\x51\x30\xa3\x60\x46\x91\x95\x09\xf7\x5c\xc3\x33\x85\x37\xa8\xad\x32\xa7\x40\x09\x55\x32\xaa\x64\x54\xc9\x7d\xcb\x6c\x9d\xa0\x6d\xf7\x04\xad\xb3\x14\x9d\x27\x3b\x30\x70\xcd\xc0\x75\x56\x5c\x26\x3e\xf1\xd2\x58\xa3\x10\xcd\x86\x4b\x1b\xee\xb1\xb9\x4c\xda\x75\x50\x6b\xde\x35\x33\xb7\x5c\xde\x72\x79\xcb\x23\xb6\xfc\xf5\x6d\xb6\xe1\xb0\xe5\x50\x71\xb8\x3f\x0b\x97\x3b\xe8\x46\xf4\xef\x2a\x2a\x26\x57\x4c\xae\x98\x5c\x31\xb9\x9a\x75\xb7\xd0\xec\x95\x1d\x90\x81\xf7\x59\x7e\x16\xd9\x42\x4b\x91\x86\xeb\xe6\x1e\xb8\xc3\x43\xfa\x38\xd4\x3d\x71\x5a\x99\x1b\x33\x57\x2b\xa8\x7f\xd4\xcb\x6b\x11\xf5\x62\xdf\xb7\x9a\x17\x87\x22\xae\xbe\x24\x88\x7c\xbc\xbd\xb1\xc7\xeb\x8d\x09\xf9\xf8\x3f\xff\xe4\xf3\xfb\xb5\xc9\x3c\xfb\xc4\x95\xb3\x18\xd9\xcc\x15\x1e\x1d\xd0\x46\x21\x64\xc1\x88\x62\x46\x5c\xcb\xc6\xa0\x3e\x6b\x96\xb3\xa9\x0b\xc4\xf7\x80\x42\xc8\xd9\x46\x0e\xe5\xa2\x3e\x1b\x26\x67\x3b\x17\xd5\x2f\x14\xb4\x71\x61\xf2\xdc\xe4\x43\x47\x17\xd4\x6f\xd3\x65\x59\xb2\xfa\xe7\xd3\xb7\x17\x26\xef\xb3\xfc\x6f\x00\x00\x00\xff\xff\x7a\x35\x47\x2f\x6e\x04\x00\x00")

func complySoc2ReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2ReadmeMd,
		"comply-soc2/README.md",
	)
}

func complySoc2ReadmeMd() (*asset, error) {
	bytes, err := complySoc2ReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/README.md", size: 1134, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2NarrativesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xf1\x77\xf1\x57\x70\x49\x2d\x4e\x2e\xca\x4c\x4a\x55\xf0\x4b\x2c\x2a\x4a\x2c\xc9\x2c\x4b\x2d\x06\x04\x00\x00\xff\xff\x4e\x2e\x7e\x17\x1a\x00\x00\x00")

func complySoc2NarrativesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2NarrativesReadmeMd,
		"comply-soc2/narratives/README.md",
	)
}

func complySoc2NarrativesReadmeMd() (*asset, error) {
	bytes, err := complySoc2NarrativesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/narratives/README.md", size: 26, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2NarrativesOrganizationalMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\xbd\x0e\xc2\x30\x0c\x04\xe0\xdd\x4f\x71\x2a\x73\x10\x29\x3f\x43\xd6\x4e\x2c\x14\x01\x2f\x60\xb5\x01\x19\x35\x89\x94\x98\x0e\x3c\x3d\x6a\xa7\x2c\x4c\xfe\x64\xe9\x4e\x17\x39\x78\x87\xa6\xcf\x2f\x8e\xf2\x65\x95\x14\x79\xc2\x85\x73\x66\x95\xd9\x37\x54\x58\xa5\x3c\xc5\x17\x47\xc0\xe3\x7e\xed\x96\x0b\x18\x74\x9d\xdd\xda\xca\x6d\xe5\x7d\xe5\x43\xe5\x23\x05\x7e\xa7\x7c\xf3\xb3\x14\x49\x71\xed\x34\x18\x59\xbd\x43\x3f\x28\x2c\xda\x9d\x3d\xad\x81\x21\x85\xe0\xa3\x3a\x9c\xa3\xa8\xf0\x84\x31\x0d\x9f\xe5\x43\xc6\x18\xa2\x0d\xfe\x4d\x26\xfa\x05\x00\x00\xff\xff\x8e\x75\x7c\xcd\xd4\x00\x00\x00")

func complySoc2NarrativesOrganizationalMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2NarrativesOrganizationalMd,
		"comply-soc2/narratives/organizational.md",
	)
}

func complySoc2NarrativesOrganizationalMd() (*asset, error) {
	bytes, err := complySoc2NarrativesOrganizationalMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/narratives/organizational.md", size: 212, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2PoliciesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xf1\x77\xf1\x57\x70\x49\x2d\x4e\x2e\xca\x4c\x4a\x55\x08\xc8\xcf\xc9\x4c\xce\x4c\x2d\x06\x04\x00\x00\xff\xff\x6e\xd7\x04\x8c\x18\x00\x00\x00")

func complySoc2PoliciesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2PoliciesReadmeMd,
		"comply-soc2/policies/README.md",
	)
}

func complySoc2PoliciesReadmeMd() (*asset, error) {
	bytes, err := complySoc2PoliciesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/policies/README.md", size: 24, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2PoliciesApplicationMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6f\x53\x31\x10\x84\xef\xfe\x15\xab\xf6\x02\x11\xc9\x0f\xe8\x2d\x0a\x12\x70\x6a\xa5\x87\xc4\x01\x71\x70\xec\x7d\x79\x2b\xec\x5d\xcb\x5e\x27\xf8\xdf\x23\x3b\x14\x5e\x2a\xda\xeb\x6a\x3c\xf3\xcd\x98\x6d\xc4\x07\xb8\xdb\xbb\x88\xb0\x4f\x29\x90\xb3\x4a\xc2\x30\xa1\xab\x99\xb4\xc1\x93\x04\x72\xed\xce\x58\x97\x85\x5b\xec\xda\xe9\xe9\xce\x6c\xb7\x5b\x63\xee\xe1\xf1\x8c\xf9\x4c\x78\x31\xe6\xeb\xf2\xa6\x01\x9c\xe4\x8c\x99\x0b\xe8\x82\x50\x0b\x82\xcc\x60\xff\xc9\x0b\x78\xc4\x88\x1e\x5c\x26\x25\x67\x03\xa8\xc0\x80\xfa\xc2\xb3\xe4\x78\xeb\xb9\xeb\xd1\x87\x67\xe5\x2a\xb5\x5c\x39\x66\x09\x41\x2e\xc4\xa7\xdb\x08\x9b\x11\x2e\xa4\x0b\xf1\xa0\x28\x4e\xd2\xe0\xd0\x85\x0a\xa4\x81\xf9\x60\xcc\x06\x3e\x91\x7e\xae\x47\xb3\x81\x29\x58\xf7\xb3\x1f\x44\x4e\x61\xd4\x2b\xc6\xac\xe3\xa0\xd4\x94\x24\x6b\x8f\x4a\x59\x7c\x75\x83\xd3\x5b\xb5\x20\x09\xf3\x1f\xd5\xbb\x92\xd0\xd1\xdc\x69\x43\x1b\xd9\xfb\x6f\x13\x1c\x84\x8b\x04\x7c\x3f\xb8\x3c\x06\x3a\xf6\x07\x18\x1a\xe0\x2f\x17\xaa\x47\x0f\x73\x96\xb8\xc6\x1b\xc5\x3f\x76\xf7\x09\xb9\x90\xd2\x99\xb4\x19\xb3\xe7\x06\x4e\x62\xb2\xdc\x3a\x46\xca\x84\x6a\x73\xbb\x72\x44\xdb\xe0\x88\x50\x54\x32\xfa\x55\xff\x82\xb0\xf9\xfe\xdf\x11\x7f\x6c\x76\xc6\x1c\x6a\x51\x89\x98\x9f\x2b\x82\x75\x23\x8e\xb0\x40\xac\x45\xbb\xa7\x13\xee\x95\xd1\x03\xb2\x52\xee\xe8\xab\x7d\xdf\x72\xbf\x87\x47\x5d\x30\xbf\xf8\xbb\xeb\xed\xe6\xcf\x58\x14\x02\x95\x9e\x41\xfc\xba\xe5\x68\x49\x3c\x66\x7b\x75\x8a\x0f\x70\xac\x7a\x85\xef\xb6\x4e\x58\x2d\x31\x74\xa9\x7b\xd9\x56\xf2\xdf\xdb\x56\x2e\x8c\x7e\x38\xec\x7e\x07\x00\x00\xff\xff\xec\x7d\x01\x64\x2f\x03\x00\x00")

func complySoc2PoliciesApplicationMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2PoliciesApplicationMd,
		"comply-soc2/policies/application.md",
	)
}

func complySoc2PoliciesApplicationMd() (*asset, error) {
	bytes, err := complySoc2PoliciesApplicationMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/policies/application.md", size: 815, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2PoliciesInformationMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcb\x6a\xf3\x30\x10\x85\xf7\x7a\x8a\xc1\xde\x24\x01\xe7\x01\xb2\x33\xbf\xff\x85\x57\x35\x76\xc1\x8b\xd2\x85\x90\xc7\xcd\xd0\xe8\x82\x46\x4d\x08\xa5\xef\x5e\x7c\x89\x65\xda\xb4\xdd\x1d\xa4\xf9\xce\x9c\x33\x46\x6a\x3c\x40\x92\x2b\x8d\x50\x9a\xde\x7a\x2d\x03\x59\x03\x0d\xaa\x37\x4f\xe1\x0a\x95\x3d\x91\xba\x26\x42\x2a\x6f\xcd\x55\x1f\x20\x29\x9b\x2a\x11\x59\x96\x09\x91\xc2\xc3\x19\xfd\x99\xf0\x22\xc4\xe3\xf1\x57\x03\x20\x06\x09\xca\x6a\x67\x99\x02\x82\x9b\x5e\x3d\xf6\xe8\xd1\x28\x32\x2f\x60\xc3\x11\x3d\x8c\x49\xc6\x5f\x42\x06\xd2\x4e\xaa\x30\xfc\xd2\xca\x9b\x67\xef\xfd\x10\xe1\xdf\xe0\x69\xd0\x84\x69\x13\x21\x4f\x61\xfe\xaa\x34\x24\x9a\xf2\x60\x07\xb6\x3f\x08\x91\xa6\x29\x3c\xe5\xce\x9d\x48\xdd\x27\x36\xbb\xbc\xa9\xf6\xae\xeb\x77\xdb\xe7\xcd\x2c\xb7\xf0\x9e\x7d\x4c\x68\x21\x83\x84\x1a\x03\x9a\x91\x5e\xa0\xa2\x5e\xa0\x59\x7e\x81\x14\x9a\x80\xfe\xce\xba\x22\xae\x2b\xbe\xad\xab\x24\xf3\xc5\xfa\x2e\x8e\x57\xed\x32\x3e\xcb\xd5\x78\x8d\xda\x86\xe1\x2c\x0a\x99\x23\x53\xff\xcf\x17\xe8\xa6\x57\xd4\x92\xa9\x34\x8a\xba\xe1\xca\x35\xb2\xb3\x86\x31\x5a\x34\x65\x2c\x78\xd3\x2b\x8b\xd6\xfa\x57\x0e\x3f\x5d\xb4\x8d\x15\xdb\x55\xc5\xcf\x00\x00\x00\xff\xff\xfa\x00\xd3\xd4\x98\x02\x00\x00")

func complySoc2PoliciesInformationMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2PoliciesInformationMd,
		"comply-soc2/policies/information.md",
	)
}

func complySoc2PoliciesInformationMd() (*asset, error) {
	bytes, err := complySoc2PoliciesInformationMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/policies/information.md", size: 664, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2PoliciesTrainingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xc1\x6e\xdb\x3c\x10\x84\xef\x7c\x8a\x41\xfe\xab\xed\xbf\x36\x1a\x14\xf0\xcd\x08\x72\x08\x10\x20\x46\xeb\x9e\x8a\x1e\x36\xe4\xc8\xda\x46\x22\xd5\x25\x65\xd7\x6f\x5f\x50\x76\x52\xa3\xcd\x49\x5c\x69\x56\xfb\xcd\x2c\xa3\xf4\x5c\xe3\x66\x9b\x3a\xf5\x27\xec\x4c\x34\x6a\xdc\xe3\x5c\xdf\x38\xf1\x96\xe2\xa9\xaf\x8a\xdd\xf6\xc6\x65\x29\x9a\x1b\x65\x5e\x3b\x60\xf7\x65\x5b\x1f\xc0\x1c\x77\x77\xb7\x8b\xd5\xd5\x79\xf9\x76\x5e\x2e\x56\xae\x97\x1f\xc9\x3e\xf3\xa0\x59\x53\x9c\x5a\xe7\x08\x52\xb8\xc6\x93\x2f\x58\x2d\xb1\xfa\xb0\xfc\x34\x75\xf8\xd4\xf7\x8c\x65\x8d\xfb\x5f\x9e\x5d\xc7\x58\xe0\x5b\x89\x7b\xe6\xbf\x9a\x3e\xbe\xd3\xf3\x10\x8b\xa5\x30\x7a\x06\xf4\xa4\x94\x0c\x89\x01\xbe\x25\x33\xb3\x9b\xcf\xe7\xce\xfd\x87\xa7\x03\xed\xa0\x3c\x3a\xb7\x6b\x89\xf7\x6d\x43\x42\x30\xe6\xcc\x8c\xe1\xfc\x82\x61\xf4\x52\x34\x45\x18\x7f\x8e\x6a\xac\x13\x33\x9a\x64\xd8\xf8\x9e\x60\x3f\x74\xe9\x44\x5e\x46\xa6\x58\x4c\x7c\x49\x96\x17\x75\xe6\x26\xb4\x34\x46\x4f\xe7\x36\x39\xeb\x3e\x4e\x42\x23\x8c\xbd\xc6\xc0\x80\xd2\x4a\x81\xbc\xca\x50\x12\xe4\x2c\x0c\x67\x02\x65\x86\x66\x3c\x6b\x0c\x15\x73\x8c\x81\x86\xd2\x12\x85\xd6\x67\xa4\xa6\x16\x7a\x81\xb9\x9f\x60\x2a\x21\x9e\x9a\x86\x86\x47\x96\x42\xab\x68\xff\x27\xbb\x56\x3e\xc4\xc0\x81\x31\x54\xe9\xdd\x1b\x34\x36\x7b\xe3\xe4\xf0\x4c\x3f\x0c\x9d\x7a\x79\xd6\x4e\xcb\xc9\xb9\xaf\x43\x8a\xa0\xf8\x16\xcd\xd8\x75\xf3\xa2\x3d\x67\x18\xc4\xca\x74\x44\xb2\x2b\xfb\x35\x48\xad\xb1\xcd\x26\xd8\x56\xad\xd2\xf7\x12\x65\x4f\x43\x60\xa5\xd7\xc8\x8c\x63\xab\xbe\x45\x1e\x9f\x33\x4b\x75\x93\x9a\x33\xe0\xf6\xd5\xbc\x0c\x43\x77\xaa\xb9\x4c\x49\xd5\x18\x0e\x1a\x46\xe9\x16\xa8\x6b\xfc\x53\xd7\x94\x8a\xe4\x17\x06\x1c\xb5\xb4\x30\xca\x94\x58\x1d\xff\x6f\xa4\x55\xa2\x11\xb7\x38\x26\x7b\xa9\xb2\x20\xa7\xfc\xfa\x4b\x2d\x2a\xdd\xa5\x69\x0a\xb3\xde\xbe\x19\xb2\x4f\x03\x67\x97\x3d\xf7\x43\xc7\xe9\x5a\xd4\x6f\xd3\x4a\x19\x0b\x8d\x01\x1a\x27\x58\xe2\xdb\x23\xc3\x9e\xf6\x7d\xe1\x7e\x07\x00\x00\xff\xff\xf9\x85\xe8\xec\x6b\x03\x00\x00")

func complySoc2PoliciesTrainingMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2PoliciesTrainingMd,
		"comply-soc2/policies/training.md",
	)
}

func complySoc2PoliciesTrainingMd() (*asset, error) {
	bytes, err := complySoc2PoliciesTrainingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/policies/training.md", size: 875, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2ProceduresReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xf1\x77\xf1\x57\x70\x49\x2d\x4e\x2e\xca\x4c\x4a\x55\x08\x28\xca\x4f\x4e\x4d\x29\x2d\x4a\x2d\x06\x04\x00\x00\xff\xff\x4e\xc7\xf4\x7b\x1a\x00\x00\x00")

func complySoc2ProceduresReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2ProceduresReadmeMd,
		"comply-soc2/procedures/README.md",
	)
}

func complySoc2ProceduresReadmeMd() (*asset, error) {
	bytes, err := complySoc2ProceduresReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/procedures/README.md", size: 26, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2ProceduresOnboardingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x4e\xc3\x50\x0c\x45\x77\x7f\xc5\x55\x58\xc9\x0f\xb0\x55\x80\x10\x03\xed\x50\x31\x21\x86\x17\xc7\x7a\xb1\x48\x6d\xe4\xe7\xb4\xea\xdf\xa3\xb4\x1d\x50\x47\xeb\xfa\x9e\x7b\xac\x1c\xe4\x09\xdd\xce\x06\x2f\x31\x62\x2b\x27\x7c\x36\x89\x8e\xd8\xc7\x35\xf0\x6b\xd0\x51\xdf\xf7\x44\x0f\xb8\x3d\xaa\x55\xec\x53\x7e\x1b\xd1\x17\xbe\xf1\x22\x29\x71\x50\x13\x54\xcd\x69\x19\xb0\x34\x89\x15\x8d\x62\x23\x4a\x6b\x5a\x0d\xe9\x60\x8f\x10\x4e\xec\xa2\x5e\x7a\xcf\x21\x25\x05\xfb\xb9\xf0\x0f\x0a\xb3\x2f\x96\x77\xc0\x7f\x80\xf7\xcd\x07\xc2\x67\x59\x3d\x36\x99\x85\x27\xbc\x1e\x75\x14\x63\x21\xda\x3a\xe4\x76\x60\x90\xb3\xaf\x35\x4e\x3d\x6a\x9e\x31\x7b\x6d\x38\x69\x4e\x6a\xd7\xad\x47\xbc\x5d\x3c\xe9\x2f\x00\x00\xff\xff\x9f\xc6\x48\xb2\xff\x00\x00\x00")

func complySoc2ProceduresOnboardingMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2ProceduresOnboardingMd,
		"comply-soc2/procedures/onboarding.md",
	)
}

func complySoc2ProceduresOnboardingMd() (*asset, error) {
	bytes, err := complySoc2ProceduresOnboardingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/procedures/onboarding.md", size: 255, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2StandardsReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x4e\xc3\x40\x0c\x45\xf7\x39\xc5\x97\xd8\x42\x67\xcf\xae\xe2\x08\x5c\xa0\xee\x8c\x93\x71\x99\x19\x47\xb6\x43\x95\xdb\xa3\x50\x40\xec\x9e\xe4\x67\xf9\xf9\x09\x6f\xda\xd7\x26\x34\x32\xe3\x3d\x68\x14\xb2\xe2\xd3\x74\x6e\x0d\x97\x9d\x7a\xbb\x60\x96\xc6\x0e\x19\x88\x2a\x8e\x22\xc6\x39\xd4\x76\x90\x31\xc8\x7d\xeb\x5c\x10\x8a\xac\x63\x56\xeb\x07\xd6\x88\xd5\x5f\x53\x5a\x24\xea\x76\x3d\x65\xed\x49\x57\x1e\x59\x47\x98\xb6\xe4\xb9\x72\x27\x4f\x61\xcc\xa9\x93\x07\x5b\xfa\xb8\x53\x93\x79\x4f\xfe\x93\x30\x4d\xe7\x72\xdb\x3c\x10\x95\x11\x64\x0b\x07\x7e\x67\x98\xd5\x1e\x31\xab\xe9\x8d\x73\xe0\xba\x83\x4a\x91\xb1\x40\x0d\xc6\x5d\x3f\x0f\x6e\x32\xf8\x45\x82\xbb\xe3\x2e\x51\x65\x80\x29\xd7\xef\x7f\x9e\x0f\xf1\xb1\x92\xfe\x7c\xfa\x77\x41\x1a\x83\x47\x88\x71\xdb\x4f\x5f\x01\x00\x00\xff\xff\x19\xee\x26\x41\x25\x01\x00\x00")

func complySoc2StandardsReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2StandardsReadmeMd,
		"comply-soc2/standards/README.md",
	)
}

func complySoc2StandardsReadmeMd() (*asset, error) {
	bytes, err := complySoc2StandardsReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/standards/README.md", size: 293, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _complySoc2StandardsTspc2017Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5b\xcd\x72\xdc\x38\x92\xbe\xfb\x29\x70\xb4\x23\xd8\xde\xb0\xbb\x6d\xcf\xb6\x4e\x1a\x59\x13\xe1\x88\x71\xb4\xc2\x72\xec\x9c\x21\x20\xab\x88\x35\x08\xb0\xf1\x53\x52\xed\x69\x5e\x63\x5e\x6f\x9e\x64\x23\x13\x3f\x04\x59\xa4\x64\xc9\xf2\x9c\x5c\x2e\x91\x40\xfe\xe1\xcb\x2f\x33\x51\x86\x0f\xf0\x3b\xfb\x7a\x7d\x75\xf1\xe2\xe2\xe2\xcd\xeb\x37\xbf\xbf\x60\x2c\x7f\xd7\x03\x03\x13\x54\x38\x32\x09\x83\x35\x3e\x38\x1e\xc0\x33\xce\x84\x1d\x06\x15\x06\x30\x81\x05\xcb\x94\x09\xb0\x77\xf8\x18\x37\x92\x41\xe8\x95\xe0\x9a\x1d\xb8\x8e\xe0\x5f\x30\x26\xc1\x0b\xa7\xc6\xa0\xac\xf9\x9d\x5d\x43\xf0\x2c\xf4\xc0\xbe\x5a\x03\x8c\x87\xfc\x79\x3c\x63\x97\x3e\xf0\x1b\xad\x7c\x0f\x9e\x5d\x07\x6e\x24\x77\xd2\x33\xbb\x63\x17\xd6\xc8\x28\xc2\x19\xbb\xc4\x25\x49\x82\x73\xd9\x83\x03\x23\x00\xb7\x5f\x7f\xf8\x5c\x4a\x07\xde\x83\x67\x1f\xe1\xa0\x38\xee\xee\x99\x32\x8c\xb3\xaf\x6a\x00\x7d\x64\x9f\xb9\x31\xe0\xce\xf0\x0d\xaf\x24\x38\x8f\x9f\x82\xe3\x22\x58\xe7\x49\x93\xff\x01\x23\xad\x63\x97\xc3\xa8\xed\x11\x80\x5e\xff\x58\x0d\xa1\xcc\x9e\x7d\x0a\xf8\x56\xb1\x05\xd9\xef\xed\xdc\x7e\x37\x96\x3b\x89\x82\x49\xe5\x20\x2d\x3d\xb3\xa5\x32\x12\x46\x30\x92\x94\xd9\x39\x3b\xb0\x81\x1b\xbe\x07\xb2\x2d\x99\xf3\x0e\x9c\x50\xa8\x87\x3d\x80\xf3\x6a\xdf\x07\x5c\x0e\xcd\x26\xe1\x00\xda\x8e\xf5\xd1\x11\xdc\xce\xba\x81\xe3\x52\x76\x47\x6e\x71\x86\x6b\x26\x50\x2f\xab\x97\xae\x68\x0d\xfe\x47\x5d\xfb\x0b\xf8\x11\x2d\x72\xa3\xb4\x0a\x0a\xfc\x19\x3b\x1f\x47\xad\xc0\xb3\x2f\xa0\xe1\xc0\x4d\x60\x97\x77\x23\xb8\xa0\x3c\x9c\xb1\x3f\x46\x48\x7a\x7c\xaa\x7a\x04\x7d\x3c\x63\xd7\x71\x1c\x35\x29\xe1\xd9\x5f\xc9\x04\xf5\x25\xb2\xd2\xaf\x93\x95\x3e\x4f\xfa\xc2\x24\x51\xc7\x6e\x55\xe8\x8b\xf9\x8a\x74\x1d\xf3\xc1\x45\x11\xa2\xc3\x27\x1c\x8c\xd6\x91\x1f\xb4\x32\xf8\x05\x1a\x81\x8f\xa3\xb3\xa3\x53\x3c\x00\xe3\x31\xf4\xd6\x91\x1a\xf4\x37\xb7\xd0\x0d\x1d\x8a\x86\x1c\xa3\xf3\x51\x91\x5d\xed\xcd\xff\x82\x08\xea\x70\x1a\xb9\x53\x9c\x9c\x6b\xcd\xae\xab\x1c\xc5\x1b\x97\x74\x52\xe6\x71\xfc\xa5\x4a\xf8\x77\x94\xf0\x8c\x7d\x84\x5d\x12\xf5\xdc\x7b\xb5\x37\x59\xe6\xbf\xab\x41\x05\xcf\xce\x17\xe2\xae\xb8\xa2\x06\xf5\xf5\x08\x42\xed\x94\x60\x5f\xe0\xcf\xa8\x5c\x36\xf5\x3f\x7a\x30\x69\x0f\xdc\xf3\xe1\xf5\x26\x9d\x3e\x61\xb0\x70\x91\x8e\xc9\x3f\xd0\xf4\x97\x77\x39\x7c\xae\xb8\xa3\x25\x68\xf1\xaa\x1d\x6e\x70\xdd\x38\x63\xa1\x6a\xd7\xee\xde\xad\x6e\x4f\x81\xf0\xdb\xe3\xe1\x86\x07\x3a\xa5\x5d\x89\xff\x2e\xfb\x36\x70\x65\xf0\xd1\x11\x02\x3e\xa9\x8c\x54\x07\x25\x23\xd7\xe9\xdc\x6b\xb5\x37\xb4\x04\x05\xd6\xb6\x9f\x5b\xff\x5d\x59\xad\x44\x31\xdf\x15\xd9\x47\xa0\xdd\x26\x24\xba\xc8\xfb\x09\xa0\x67\x1a\x07\xf5\xd6\x05\x61\x07\x65\xf6\xe8\xb8\x24\xb3\xef\x10\x8d\x50\xe8\x6a\x13\x94\x9a\x8e\x4f\x11\xf6\x8c\x5d\x69\x6e\xca\x96\x30\x72\x8c\xb1\x9d\x75\xec\x3a\x0a\x01\xde\x2b\x6b\x5a\xc7\x61\xe8\xfd\x95\x8b\x6f\x7b\x67\xa3\x21\xa4\x99\xad\x35\x7f\xf0\x2b\x88\xde\x10\x3a\x57\xb9\x8f\x27\xaf\x5c\x39\x7b\x50\x12\x3c\xfb\xea\x78\x0a\xa4\x60\xd9\x67\xae\x0c\x19\x78\x65\x09\x0c\x25\x72\xe6\xbb\x55\x67\xf6\x56\x4b\x3f\x73\x07\x17\xc2\x46\x83\x66\x06\xd2\x2c\xf4\xa0\xdc\x09\x5e\x3d\xee\xb8\xbe\x3e\xf1\xa3\xd9\x59\x27\x30\x59\x94\xdd\x70\x99\x23\xfb\xda\x3b\x1b\xf7\xfd\x2c\x78\x1f\x8c\xd5\xf9\xb1\xbe\x6a\x80\xf6\x33\x70\x9f\x16\xf9\x64\x04\x6a\x7c\x98\xd6\xb8\xc5\xac\xd4\x46\xcb\xa3\x5e\x24\xd3\xfc\x61\xf6\x16\x5d\x90\xc1\x57\x40\xeb\xd2\xcb\x3b\x0a\x88\x03\x60\xa0\x78\x5a\x6d\x6b\xb7\x76\x5d\xeb\xd8\x47\xe5\x85\x1a\x09\x36\x5b\xe7\xbf\xb8\xb8\x78\xbb\xc1\x00\xec\x4d\x8a\x54\xeb\xd8\x1e\x4c\x46\x7d\x5c\x35\x62\xb4\xbb\x9c\x1b\x3a\xf6\x67\xe4\x64\x66\x65\x68\x6f\xf4\x05\xc6\x8f\x8f\x23\xe2\x03\xf9\x6f\x17\x0d\x01\x0d\xea\xf5\x70\x9e\x22\x99\xde\xae\xca\x54\xde\xd4\x47\x82\x88\x88\x71\x99\x92\x6a\xdd\xbb\x63\xca\x08\x1d\x25\xed\x55\x83\x65\x3d\x1b\xa0\xbd\x97\xc2\x74\xcc\x00\x1a\x99\xbb\xe3\x33\xa8\xf1\xeb\xaa\x1a\x33\xd9\x09\x9d\xa0\x60\xef\x98\xb1\xd7\xc1\x9e\x3b\x52\x62\xe0\x21\xa0\xef\xf9\x6e\x87\xca\xe0\xe9\x7c\x8a\x2c\xbf\x6e\xb8\xd9\xa7\xbc\x82\x69\x6d\xb2\x16\xc9\xe4\xe3\x6e\x87\x60\x68\x02\x13\x9a\x13\xdd\x0b\x96\x81\xa1\x53\x8c\x32\x28\x4c\xfe\x98\x93\x92\xd3\x29\x19\x23\x14\x7a\x42\x5d\xbb\x63\x4e\xf9\x6f\x14\x2a\x89\x3c\x05\xbb\x8d\xc2\x24\xe1\x86\xd3\xf3\x36\x68\x15\x5a\x30\x58\xda\x9e\x8b\x5e\xc1\x01\xca\x66\x98\x50\x5b\x87\x0b\x67\x7d\x02\xc1\xbc\x0e\xc9\x67\xb8\x3e\xfe\x5f\x5d\x89\x63\xb2\xb9\xe1\x5e\xa5\x58\x90\x10\xc0\x0d\x09\x02\x7b\x7b\x4b\x2f\xa7\x07\x7d\x6f\xa3\x96\xec\x06\x32\x5b\x93\x6b\xe2\x6f\x39\xbb\x05\xe4\xd1\x62\xae\x52\x5c\xd3\x86\x3b\xc7\xa3\xa4\x64\x45\x76\xc3\x7d\xef\x53\xf1\x7e\xeb\xad\x67\xd6\xc6\x7a\x93\x83\xc0\x33\xd1\x73\xb3\x07\x14\x8a\x07\x26\x48\x3b\x24\x28\xe4\x4e\xa4\x74\x4c\x0d\x23\x17\x29\xf0\xfd\xd1\x07\x18\xbe\x2f\xce\x7e\xdb\x8a\x33\xd0\x40\xf9\x50\xce\xf2\x61\xa6\xb0\x9e\xd9\x8c\x7b\xdc\xc8\xff\xb2\x8e\x79\xcc\x83\x48\xe9\x20\xa1\x1b\xd1\x14\xe4\x02\x5e\x80\xa3\xbc\x74\xdb\x43\xe8\x81\x72\x09\x91\x00\x6b\x88\x11\xad\x08\xc9\xb8\x03\x36\x3a\xf0\x85\x37\x37\x87\x67\x4d\x81\xf5\x30\x84\x0a\xb3\xb8\xc4\x02\x7e\x16\x1b\x4a\x48\x27\x47\xe4\x24\xc6\x59\x48\x35\xc8\x40\x35\x48\x72\xaf\xf5\xd0\x1c\xf7\x0c\x4d\x25\x41\xf2\x6f\x68\x0c\x61\x9d\x4b\x1e\x67\x89\xaa\xb5\xe8\xe6\xc1\x28\xeb\x96\xe5\x43\x58\xad\x41\x3a\x0a\xf5\x89\x29\x9f\xaa\xfd\xee\x7e\xbf\xd1\xda\xc5\x75\x93\x61\x51\xb6\x84\xa5\x39\x8e\x4c\x70\xea\x26\x06\x28\x11\x3c\xa8\xa0\xf6\x09\x1f\x2a\x20\x3c\x14\xdc\xe4\x67\x21\x60\x4c\x84\x41\xe3\xae\x2b\x11\xff\x6e\xc3\x51\x5c\x7b\xbb\x2e\x76\xca\x63\x7a\x4d\x7c\xac\x38\x58\x40\xaa\x63\xb5\xdd\x9f\x40\xff\x23\x0e\xe2\xbb\x0d\x1c\x90\x80\x55\xe5\x86\xed\x12\x43\x19\x0b\xfb\x24\x63\xd6\xe2\x88\xdd\xe2\x7f\x95\x67\x70\x37\x82\x08\x20\x49\x2b\x65\xd8\xe8\xac\x00\x49\x35\x09\xbd\x31\xc6\x30\xad\xa1\x0c\x99\x11\xc5\x3a\x15\xf2\xfd\x86\xb7\xd5\x50\xab\x38\x6d\xf7\xc4\xfa\x38\x91\x50\xe6\x41\x44\xca\x01\xde\xee\xc2\x2d\x77\x80\xa1\xb8\x73\xbc\xd6\x67\xb9\x1a\x73\xa2\x57\x01\x4a\xa5\x84\x56\x1d\x9d\x0d\x49\xec\x96\x22\x20\x10\x05\x72\x75\xfe\x3b\xda\x79\x48\x15\x71\xdd\x0b\x0e\x24\x4a\xb0\x6c\x00\x08\x0d\x98\xff\xfb\x9f\xff\xf2\xf7\x7a\xe1\x7d\x1b\x1c\x57\x0e\x0f\x4a\xb0\x4c\x79\x1f\xe9\xe8\x24\x40\x13\x0e\x64\x42\xe3\x14\x28\x7b\xc7\x4d\x68\xfe\x9e\x54\xef\xda\x24\xe2\x60\xaf\x7c\xca\xc7\xa8\x6d\xa2\x91\x98\x50\x0c\xdc\x4e\x38\x90\xea\xf8\xfc\x9f\xe8\xf1\xf1\x5b\x3a\xef\xd9\x98\xca\x33\x2e\x31\xd1\xe0\x52\x20\xd9\xcd\xb1\xd9\xe3\x35\xfb\x1b\x51\x64\x7c\xfe\xb1\xef\x76\xf4\xc6\xaa\x7e\x0e\x98\x83\xc1\x1e\x40\x22\x74\x9a\xf4\xe0\xb4\xa6\xb1\x4c\x5b\xb3\xc7\xef\x8a\x52\x2b\x49\xee\xfd\x46\x70\x4f\x86\xe8\xd8\x60\x25\xe5\x9b\x0e\xa9\x63\xda\xd2\x97\x8d\x82\x65\x92\x07\xde\x35\x51\x54\xc0\x38\x27\x04\x4b\xa0\x7e\x6f\xcc\xdc\x70\x0f\x92\x59\xc3\x9c\xd5\xa9\x2d\x30\xe7\x75\xb4\x71\x93\xb7\x24\x60\x66\x4b\xb0\x9d\xb2\x5e\xc7\xf6\xea\x90\x00\x36\x25\xe7\x4a\x5b\x53\x36\x31\x08\x3e\x94\x4b\x34\x70\x1f\xd8\xe8\xd4\x41\x69\xd8\x27\x5a\xed\x61\x8f\xf4\xac\x80\x9a\x8c\x69\xd3\x27\x45\xe9\x7a\xd2\x76\xe0\x83\x53\x88\x5f\x63\x7f\xf4\xed\x31\x0c\x96\xed\xb8\x28\x04\x96\x32\xe8\x7d\xa6\x7a\x89\xc9\x04\xee\x38\x1e\xeb\x8e\x4c\xcf\xb0\xf4\x00\xd7\xac\xd2\xb1\x1b\x2e\xbe\xfd\x12\x47\x36\x80\x54\x9c\xf9\x60\x1d\xdf\x43\xeb\x0e\x0f\xc6\x2b\x4a\x43\xda\x26\xb6\xe7\x5f\x11\x4a\xd7\x50\xc1\x44\xee\xad\x31\xa0\x9f\x66\x87\xf5\x4a\x52\x2a\x8f\x70\xa9\x4c\x84\x06\x90\x50\xe9\x62\x96\xac\x3d\xd1\x83\x84\x36\xd5\x60\xc9\x02\xd6\xe8\x23\xe3\xbb\x90\x99\x42\x29\x0a\x83\x65\x0e\xb8\x4c\x21\x2a\xe8\x4d\xb2\x0e\xf9\x37\xc7\x66\x02\xa3\x74\x10\xf3\x6a\x3d\xf7\xec\x06\xc0\x30\xa9\xe8\x08\xf6\x05\x8c\xdb\x03\xe4\x52\x87\x46\x3e\xcd\x12\xef\x9f\x0a\xcc\x43\xae\x2f\x5b\x4c\xe5\x7b\xac\xe1\x50\x02\x07\x3c\xf8\x0c\xaf\x36\x52\x9d\x6c\x63\xc0\xe0\x27\xe6\x9c\x8f\xca\x8d\x8d\x46\x72\xa7\xd6\x45\xfb\xf0\x40\xb0\xa2\x9e\xc1\x71\xe3\x07\x45\x6d\x0b\xc4\x82\x94\x34\x4b\xcb\x66\xb0\x07\xae\x13\x47\x9b\x55\x8b\x4d\x20\xdd\x07\xa2\x39\xde\x05\x51\xd8\xae\x0d\x7f\xcf\x54\x60\x32\x3a\xaa\x33\x36\x44\x28\x70\xc4\x9f\x18\xa3\x7f\x79\xc8\x33\x39\xb5\x67\x0f\x50\xf2\x62\xb9\xac\x10\x89\x9d\x21\xa3\x8e\xa3\x4d\x6d\x0d\x85\x4f\xcb\x28\x0a\x90\x44\xd3\x98\x81\x98\x1d\xa6\x72\x1b\xfd\x14\x91\x4f\x90\xfb\xc3\x2c\xd5\xe7\xf7\xe7\xc5\xd2\x2c\xc3\x51\x79\x9f\x44\x2e\x55\xdd\x60\x8d\x0a\x96\x6c\xdb\x52\x0e\x5b\x8a\x8b\x23\x7b\xf9\xe6\xd5\x54\x51\x58\x34\xc4\x4e\xed\xa3\x2b\xbc\x1d\xc9\x89\x03\x1f\x75\x28\x2d\x9d\xa5\xee\x98\x3e\x0f\x51\x23\x3f\x9b\x60\x1c\xf7\x7e\xf9\xf6\x15\xf3\xd1\x23\x20\x4f\x85\x7b\xb0\xf8\x82\xce\x00\x71\xa0\x3c\xb8\x78\x7b\xcd\x10\xeb\x7c\x31\x6b\x57\xcf\x40\x53\x4c\x14\x42\x6d\xc7\x92\x22\xa8\xf7\x8b\x80\xd0\x3c\x85\x18\xcb\x8d\x45\x77\x15\x26\x86\xbe\x52\x46\x52\x69\x7c\xa0\xe6\xfc\xe4\xcc\xd4\x16\x34\x3c\x44\xe4\xa2\x52\x79\x4e\x84\x22\xa9\x0b\xce\xd9\x93\x62\xbf\xf1\x74\x83\x5f\x2b\x8e\x3c\x6b\xe4\x40\x11\x72\xb9\x4b\x48\x54\x8a\x5b\x68\x2b\x27\x3c\xbd\xa5\x32\x5a\xb0\xae\x35\x03\xae\x27\xff\xa9\x32\x5a\x21\x6e\x1b\xdb\xa6\x8a\xd3\x3a\xd6\xf3\x03\xe4\xd8\x80\x54\x0a\xb3\x1d\x57\x3a\x3a\x28\x7d\xf6\xbc\xcb\xba\xc6\xec\x65\xdd\x53\x19\x41\xf1\xe8\x5f\xa1\x25\x3b\xa6\x76\xcc\xdb\x0e\x4b\x29\xe2\x1f\xb5\x84\x6c\x4e\x26\x4f\xdd\x5b\xe6\xa3\xe8\xcb\xb6\xab\x8a\x6f\xa6\xe9\xd1\x1a\xd9\x1e\x05\x05\x92\x9d\x4a\x84\x24\x0d\xee\x40\x44\x72\x29\x67\x12\x98\x21\x6d\xd3\xdf\x0b\x83\xc1\x2a\xd5\xee\x1d\x1f\x70\xc1\x68\x24\x38\x1f\x48\x15\x04\x16\xae\x0c\x52\x1d\xca\xd1\x21\x67\xe7\xa6\x0a\x5d\xd9\xf5\xe1\xa2\xef\xc3\x46\xde\x9d\x9a\x06\xcb\x7a\xbd\x41\xbb\xb6\x80\xb1\x35\x8b\x52\x86\xb9\xd7\x18\xa7\x62\xfc\x65\xa3\x1a\x69\x59\x65\x22\x71\x8d\x3c\xe4\x3f\x41\x99\xd6\x77\x15\x71\xe8\x51\x2b\xe2\x90\x0c\x10\xc0\x93\x1d\xd0\x08\xb5\xdd\xda\x22\xf6\x84\x59\xcb\x6a\x66\xc9\x53\x6b\xee\xa9\xe8\xb7\x12\x8e\xa7\xba\xfd\xf7\x56\xa5\xd5\x98\xb8\xf6\x46\x66\xd5\x2a\x16\xcb\x6d\xfd\xdc\xd8\x1b\x11\x27\x77\xb0\x9c\xa2\xb6\x11\x99\x7d\x6a\x2e\xdd\x44\xaf\x0c\x46\xb6\x54\xde\x45\x12\x66\x55\xb6\x8d\x0a\xba\x34\x89\x08\xfc\xa9\xbf\x30\x75\xcc\xbc\x15\x18\x4c\x32\x35\x09\x0f\x34\x32\x4d\x4f\xd6\x4d\x47\xee\x82\x01\x77\xb2\xe3\xf9\xd6\xb4\x79\xc8\xc3\x06\xaa\x1e\x12\x1a\x67\x38\xac\xd0\x22\xa2\x73\x78\x54\x72\xfa\x27\xf2\xce\x47\x2e\x4a\x67\x2f\x7a\x02\x8c\x53\x0c\x7f\xb9\xee\xd8\x96\xe8\x11\x97\x4d\x7a\x4e\x8b\x4a\x18\x52\xc7\x50\x2e\xdb\x9e\x25\x7c\x6a\x46\xe0\x52\x2a\xfc\xcc\xf5\xf4\x7a\xb0\xac\x07\x3d\x7e\x4f\x90\x9c\x9f\x0c\x91\x1f\x1f\xff\x53\x4c\x77\x39\x5b\xc1\x2c\xee\x1b\x0b\x37\x19\xdd\x33\x30\x07\xe5\x2c\xcd\xc9\xe6\x6c\xba\x0d\x7d\x62\xc6\xa5\x48\x58\xf0\xaf\x7c\xee\x8f\x8b\xf3\xf3\x9d\xe7\xe3\xfc\xcd\x46\x4e\xa1\x83\x3b\x2d\x3e\x6a\x3e\x6b\x77\xe4\xde\x4c\x53\xab\xd7\x47\xbf\xf3\x60\x6e\x85\xe2\xa2\x5f\x5a\xed\x96\x10\x26\x97\xd3\x4b\xfa\x7a\x3f\x27\x4b\x1d\xf0\x94\x85\xdb\x55\x54\x38\xae\x88\xb5\x1e\x0a\x52\xf9\xd1\xfa\x34\x7c\xfe\x29\x92\x2c\xc7\x69\x2f\xae\x3e\x6d\x99\x68\x6d\x32\x44\x8d\x07\x7f\x92\x95\x1e\x1a\x14\x4d\x63\x0e\xa2\x59\xab\x82\x4e\x27\xbe\xed\x7e\x62\x0a\x55\xb9\xee\xdb\xa5\x08\x2d\x91\x29\x0b\x56\x23\xbf\xcc\x15\xbb\x3b\x28\x01\x69\xd8\xc1\x72\x05\xdb\x2d\x9b\x7c\x19\x42\xf2\x8b\xbe\x7d\xf3\x24\x7e\xd0\x3a\x1b\xe3\x8a\x29\xbb\x8c\xed\x34\xb9\x89\x5e\x4a\x94\x39\x6e\x95\x19\x23\x1e\xda\x49\xb3\x5a\x45\xd0\x63\x88\x64\x1a\x02\x10\xb0\xa6\x12\x42\x44\xc7\xc5\xb1\x4b\x59\xb7\x90\xea\x22\x75\x57\x45\x2e\xe7\xb3\x1c\x94\x47\xd7\x0e\xa8\xe3\xfa\xe9\x7c\xa4\x8e\x0d\x66\xff\x27\x64\xde\x18\x84\x3c\x2c\x33\x65\x81\x6f\xc0\xf8\x81\x2b\x4d\x78\x4f\xd5\x9b\x56\xa8\x8b\x8d\x61\x8c\xa1\xfa\x43\x1f\xbb\xec\x8a\xfc\x19\xf3\x44\x6a\xf2\x23\x89\x15\xc2\x3a\x49\x83\xd8\x34\x4b\x6b\x03\xef\x69\x5a\x6d\x30\xb5\xef\xd2\xca\x07\x4b\x05\x49\x0e\xb5\x00\x83\xaf\xfd\xe3\x7c\xb2\xa8\xd9\x43\x2a\xfa\xa7\xea\x98\x9c\xfd\xa3\xaa\x6e\xa1\xce\x58\x6e\x29\x18\x1b\x54\xba\x08\x46\xa7\xde\x47\x5a\x0b\x4b\x23\x1b\x13\xec\x8f\x4e\x1d\xb8\xc0\x57\xf2\x05\x8e\xc7\x21\x63\x7e\xfd\x35\xed\x9e\x77\x53\x9e\xc5\x51\xf2\xd2\x7c\x6f\x20\x4e\x9e\x4a\xb2\x32\xf1\x41\xc6\xd6\x90\xcd\x85\x1c\x27\x02\xcf\xf0\x20\xbf\x96\x2b\xe7\x82\x52\xd4\x6f\x9b\x27\x80\xef\xe8\x41\xae\xe8\x79\xe2\x81\xad\x1b\x01\x33\x5c\x17\xbd\x25\xcb\x4e\x67\x65\x8e\xe5\xc2\x6a\x0d\x79\x66\x15\x3d\x60\xe9\x42\xe4\x14\xff\x8f\x55\xbb\xb6\xbe\x0e\x0d\x52\x72\x4b\x8d\xa1\x35\xbd\x8a\xc5\x16\xfe\xce\xc5\xb9\xc0\xca\xe9\xcf\x08\x26\xd9\x6d\xc7\xb8\x39\x76\xb8\x14\x70\xd1\x67\x39\x5f\xb3\xcb\xbb\x11\x8f\x47\x48\x8f\x9b\x50\xee\xa1\x3c\xaf\xa0\xca\xe7\xec\x08\x32\x51\xf2\xb9\xc8\xd6\xe5\x86\xea\x49\xe3\x34\x49\x5e\x3a\x87\xaf\xd9\x35\x56\xa4\x45\xd4\x76\x55\xea\x67\x16\xd9\x95\x09\x60\x24\x2e\x12\x1d\xd2\x83\x52\x32\x3f\x99\x14\xcc\x42\xbf\x79\x7a\x7d\x46\x8e\xe0\xf3\x1f\xb1\x69\xa9\xe8\x4e\x47\x12\x57\xb3\x7b\x0d\x57\x1b\xef\x67\x79\x40\xa6\x86\xbf\x0f\xf5\x5a\xd8\x0f\x1d\x94\xd9\x8d\x85\xbf\xd1\x65\x92\x96\xda\xa0\x2f\xd1\x4c\xb0\x08\xbd\x59\xbb\x6d\x76\xa8\xf0\x7b\x03\x18\x3b\xd6\xa5\xa6\x44\x7d\x85\x7b\x76\x0b\x5a\xe3\xbf\xcb\xa0\xa7\x12\xa4\x76\x4d\x12\x63\x42\xa8\x3c\x71\x0b\x8a\x04\x3e\xfd\x7f\x1d\x3f\x28\x0b\x64\x7a\x57\xb7\xa1\xaa\x2b\x4f\xd0\xe6\xde\x7d\xae\x78\x3b\xb1\xec\xd6\x2d\x02\x9d\x2e\x4e\x3e\x80\x83\x45\xd0\x7c\x2a\x7c\xdb\x8f\xc8\x28\xfa\x03\x92\xad\xd3\x3e\x97\x2f\xf6\xad\xca\xf3\xac\x51\xf7\xdb\x06\x29\xa3\x4e\x0b\xe8\x79\xad\xb0\x65\x9e\x1f\x77\xd1\xd6\x85\x01\x1a\xa2\xce\x4c\x5e\x26\xa5\xf8\x45\xca\x98\x73\x54\x5c\xcc\x65\xca\xa4\x8b\xee\x08\x12\x73\x91\xeb\x6a\x50\x17\x04\x0e\x0a\x6e\x53\xc3\x8f\x1a\xeb\x39\xc6\xbb\x89\x2f\xd4\x89\x90\x75\x8c\x1a\x2d\xce\x1a\x25\x98\xb0\xa3\x2a\x97\x79\x79\x58\xda\x67\x21\xe1\x93\x30\xf4\xd3\xae\x99\xaf\x4a\x30\x0a\x64\xb7\xcc\x61\xae\x1c\x1e\x90\xd3\x2d\x6f\xa3\xf2\xf8\xc3\x01\xf7\x59\x51\x42\x83\xf4\x27\x02\x83\x92\x2a\x9e\x29\xe7\x6f\x5d\xa6\xc8\x37\x50\x90\x98\x0f\x60\x64\x9a\xad\xf2\x71\xc4\xcf\xeb\x5e\xa9\xd3\xd9\xf6\xcb\xec\x0c\x9a\x56\x9f\x66\xf1\x19\x06\x92\xa2\x27\x87\x59\x39\x59\x2e\xcb\x90\xfa\xe9\x86\x70\x80\x3c\xc1\xfb\x11\x5b\x24\x47\xcd\xc0\xb1\xdc\xbb\xc9\xd9\xe7\xf9\x5c\xf7\x3c\xce\xda\xba\xbd\x91\x53\x2b\x6c\x78\x66\x69\xc8\x06\x8b\x96\xe4\xa8\x94\xd4\x45\xdb\xdc\x2f\xdb\x22\x25\x35\x3d\x4c\xc9\xfd\xb9\x34\xdd\x08\x4b\x07\xf5\x2a\x56\x41\x5e\x5e\xeb\x96\xa9\x6a\x99\xd5\x2c\x0e\xb0\x60\xa1\x6c\x39\xd1\xaf\x49\xe2\x9f\x8c\x97\x5b\x57\x27\x7e\x50\x95\x34\xa9\x2b\xe7\x00\xeb\x66\x90\xf3\x49\x62\xab\xe1\xcb\xa9\xac\xb8\x71\xc8\x8f\xc1\xbf\xfa\xd9\x6a\xaf\x97\xe3\x85\x65\x94\xd2\x67\xba\xf2\x9f\xa7\xd4\x6d\x67\xd9\xe6\xc1\xd1\x2c\x78\x7b\x9b\x86\x47\xd3\xcd\x88\x67\xd3\xe2\xf5\x6a\x37\x7c\x76\x65\xef\xdf\xff\xfc\x57\x72\x92\x4a\x3f\xbf\xc1\x92\x6f\x04\xa7\xac\x54\x22\xdf\xb4\xfc\x05\xa9\x1c\x62\x1e\x91\x67\xf2\x1e\xcd\xa2\xd6\x6e\xf5\xed\xa6\x6b\xc7\x2b\x26\x5c\xaf\xfd\x8b\x09\x1f\x6f\x3a\x3c\xf7\x0f\x9b\x0d\x4b\xdf\x5d\x7b\xbb\xa8\x92\xa7\x43\xc6\x08\x2e\x42\x4c\x89\xd5\x47\x9f\xef\xa6\x6d\xc6\xde\x46\x98\xe5\x5a\x87\x36\x53\xa5\x6d\x90\x6e\x2b\xe5\x68\x46\x4e\xd0\xfc\xc8\x67\xba\x69\x92\x27\xea\x25\xdd\x9c\x74\x24\xa6\x9f\x17\x6d\xcc\xda\x96\xc3\x9c\x1f\x8c\xf4\xf5\xab\x1b\xb3\xc6\x45\xbd\x2d\x6d\x77\xf5\x04\xe6\xeb\x7c\x65\x56\x88\xea\xd2\xf8\x77\x49\x94\xb0\x8c\xda\x47\xcd\xa7\xf1\x08\x39\xf7\xd9\xc4\x5f\xbf\xde\x51\xc5\x9f\xa7\xbf\x14\x43\xa6\xfc\xb4\x23\xdf\x43\x27\xd6\xbd\x16\x4e\x3d\x68\x59\xca\xbd\x92\x21\x4a\xd2\x6c\xd7\xc5\x63\xb5\x5e\x9a\xd4\x6b\x13\x27\xcf\x57\xca\xf7\x2c\x76\xf8\xb0\xd9\xfd\xd0\xd3\x95\xd2\x69\x2c\x30\xc1\x73\x1c\x7f\x09\xf6\x17\x49\x9f\x1b\xf8\x26\x58\xcf\x3f\xa4\xfb\x79\x30\xbb\x35\x42\x6d\xe7\xb5\xa5\xdf\x97\x89\xb3\x00\xba\x03\xd7\x95\x29\x38\x7d\x76\xe0\xad\x3e\xd4\x8e\xe0\xc4\xcc\x4a\x5f\x87\x1e\x88\x25\x84\x95\xa1\x22\x37\x4d\x60\x87\x51\xa3\x59\xfc\x54\xd7\x47\x4c\x6c\x2b\x7d\x90\x26\x76\xf3\x25\x70\xc2\x4d\xfa\x61\x47\x1d\x4d\x35\xe8\xfa\x34\x0c\xbf\xa8\x2c\xae\x85\xc2\xe9\xe7\x1d\xe5\x4e\x40\xf3\x6e\x53\xb5\xcc\xee\x70\x23\x1e\x0d\x5c\x52\x43\x18\x41\xdc\xac\xf4\xf8\x16\x3e\xf9\xff\x00\x00\x00\xff\xff\x35\x50\x03\x1b\x67\x3b\x00\x00")

func complySoc2StandardsTspc2017YmlBytes() ([]byte, error) {
	return bindataRead(
		_complySoc2StandardsTspc2017Yml,
		"comply-soc2/standards/TSPC-2017.yml",
	)
}

func complySoc2StandardsTspc2017Yml() (*asset, error) {
	bytes, err := complySoc2StandardsTspc2017YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comply-soc2/standards/TSPC-2017.yml", size: 15207, mode: os.FileMode(420), modTime: time.Unix(1521499892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"comply-blank/README.md": complyBlankReadmeMd,
	"comply-soc2/README.md": complySoc2ReadmeMd,
	"comply-soc2/narratives/README.md": complySoc2NarrativesReadmeMd,
	"comply-soc2/narratives/organizational.md": complySoc2NarrativesOrganizationalMd,
	"comply-soc2/policies/README.md": complySoc2PoliciesReadmeMd,
	"comply-soc2/policies/application.md": complySoc2PoliciesApplicationMd,
	"comply-soc2/policies/information.md": complySoc2PoliciesInformationMd,
	"comply-soc2/policies/training.md": complySoc2PoliciesTrainingMd,
	"comply-soc2/procedures/README.md": complySoc2ProceduresReadmeMd,
	"comply-soc2/procedures/onboarding.md": complySoc2ProceduresOnboardingMd,
	"comply-soc2/standards/README.md": complySoc2StandardsReadmeMd,
	"comply-soc2/standards/TSPC-2017.yml": complySoc2StandardsTspc2017Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"comply-blank": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{complyBlankReadmeMd, map[string]*bintree{}},
	}},
	"comply-soc2": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{complySoc2ReadmeMd, map[string]*bintree{}},
		"narratives": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{complySoc2NarrativesReadmeMd, map[string]*bintree{}},
			"organizational.md": &bintree{complySoc2NarrativesOrganizationalMd, map[string]*bintree{}},
		}},
		"policies": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{complySoc2PoliciesReadmeMd, map[string]*bintree{}},
			"application.md": &bintree{complySoc2PoliciesApplicationMd, map[string]*bintree{}},
			"information.md": &bintree{complySoc2PoliciesInformationMd, map[string]*bintree{}},
			"training.md": &bintree{complySoc2PoliciesTrainingMd, map[string]*bintree{}},
		}},
		"procedures": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{complySoc2ProceduresReadmeMd, map[string]*bintree{}},
			"onboarding.md": &bintree{complySoc2ProceduresOnboardingMd, map[string]*bintree{}},
		}},
		"standards": &bintree{nil, map[string]*bintree{
			"README.md": &bintree{complySoc2StandardsReadmeMd, map[string]*bintree{}},
			"TSPC-2017.yml": &bintree{complySoc2StandardsTspc2017Yml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
